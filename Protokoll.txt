GitHub: https://github.com/MariaNwk/MTCG

Design / lessons learned:

Der Server wird im Main durch die socket Applikation gestartet. Der Server erhält
anschließend die Applikation MtcgApp. Anschließend erhält der Server requests und
sendet diese requests zur handle() Funktion und die hande() Funktion leitet den Request
weiter zum entsprechenden Controller. Der Controller überprüft zum einen die Route
im Request und zum anderen ist die gesamte Logik im Controller implementiert. Der Service
leitet den request weiter ans Repository, welches hauptsächlich mit der Datenbank kommuniziert.
Threads wurden hauptsächlich im BattleController verwendet. Wenn ein Battle gestartet wird,
sind 2 Spieler dafür notwendig, welche gegeneinander spielen. Kommt also zunächst ein Request
beim BattleController an, so muss dieser warten bis ein zweiter Request kommt. Erst wenn ein
zweiter Request den BattleController aufruft, kann das Battle gestartet werden.

Ich habe viel durch dieses Projekt gelernt. Während der Implementierung bin ich auf
viele Fehler gestoßen, wodurch ich gelernt habe, mit Fehlern umzugehen. Das beinhaltet
den Debugger und das Recherchieren. Fehler haben dafür gesorgt sich intensiv mit dem Code
auseinanderzusetzen, wodurch man auch den Code ins Detail zu verstehen gelernt hat. Es sind
bei mir leider ständig Probleme aufgetreten... Angefangen bei HoppScotch mit "OPTIONS",
der Implementierung der Repositories, bis hin zu den Threads im BattleController.
Grundsätzlich hätte ich von Grund auf viele Dinge anders implementiert. Insbesondere die
Architektur und den "Ort" von Funktionen, wie zum Beispiel das Authentifizieren.


Unique Feature:

Mein unique Feature ist die sogenannte "switch" Karte und sorgt dafür, dass wenn diese während
dem Battle gelegt wird, beide Spieler ihre Karten tauschen. Das soll nochmal für Spaß und Dynamik
im Spiel sorgen. Dieses unique Feature kann ebenfalls getestet werden mit der Batch-Datei
uniqueFeature_MonsterTradingCards.exercise.curl.

Unit Tests:

Mit meinen Unit Tests teste ich diverse Sachen: Controller, Entity CardDefinition, den Request & HttpMapper
(dort habe ich Funktionen ergänzt) und Repositories.

Bei den Controllern hab ich hauptsächlich die Responses getestet, ob nämlich die richtigen Responses generiert
werden. Die Controller sind sehr wichtige Implementierungen und liefern wichtige Informationen zurück an den Client,
,weshalb diese auch ausführlich getestet werden müssen.

Die Repositories sind entscheidend für das Speichern von Daten in der Datenbank, weshalb auch hier geprüft werden muss,
ob die Kommunikation mit der Datenbank funktioniert. Wichtig ist, dass die übergebenen Daten korrekt in der Datenbank
gespeichert werden und zusätzlich auch dass die korrekten Daten aus der Datenbank aufgerufen werden können.

Die HttpMapper und Request Klasse sind in meinem Projekt wesentlich für die Authentifizierung der eingehenden
Requests. Je nachdem, ob der Token passt oder nicht, der User ein Admin ist oder nicht, darf nur eingeschränkt
oder nicht eingeschränkt gehandelt werden. Deswegen sind Unit Test wichtig.

Ich habe ebenfalls getestet, ob die Karten korrekt erzeugt werden und falls eine Karte nicht korrekt
erzeugt wird, wird getestet, ob auch die entsprechende Fehleranzeige kommt.

Time spend:

Meinen ersten Commit hatte ich am 07.12.2023 und seitdem sind 11 Commits dazugekommen. Ich muss aber dazu sagen,
dass ich davor schon ein Repository hatte mit paar Commits. Die meiste Zeit verbrachte ich an der Implentierung
der Controller und Repositories. Die Battle Logik hat mich zum Ende hin auch sehr viel Zeit gekostet, sowie die
Implementierung der Threads. Alles in Einem bin ich aber ziemlich konstant und gleichmäßig fortgeschritten und
habe für jeden Controller 1-2 Tage gebraucht. Für die Battle Logik brauchte ich nochmal bisschen länger.
